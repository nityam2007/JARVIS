import os
import json
import sys
import time
import random
from datetime import datetime
from groq import Groq
from dotenv import load_dotenv
import warnings
import threading
import queue

# Import custom modules
from modules.audio import AudioManager
from modules.speech import SpeechRecognitionManager
from modules.system import SystemController
from modules.memory import MemoryManager

# Suppress warnings
warnings.filterwarnings("ignore")

class Assistant:
    """
    Main Assistant class that integrates all components and manages the voice assistant's operation
    """
    def __init__(self):
        """Initialize the assistant and all its components"""
        # Create necessary directories
        self._create_directories()
        
        # Initialize components
        self.load_config()
        self.setup_ai()
        
        self.audio = AudioManager(self.config)
        self.speech = SpeechRecognitionManager(self.config)
        self.system = SystemController(self.config)
        self.memory = MemoryManager(self.config)
        
        # State variables
        self.is_listening = True
        self.is_active = False
        self.is_processing = False
        self.last_activity = time.time()
        self.command_queue = queue.Queue()
        
        # Start background threads
        self._start_idle_checker()
        self._start_command_processor()

    def _create_directories(self):
        """Create necessary directories for the assistant"""
        base_dir = os.path.dirname(os.path.abspath(__file__))
        os.makedirs(os.path.join(base_dir, 'audio_cache'), exist_ok=True)
        os.makedirs(os.path.join(base_dir, 'audio_temp'), exist_ok=True)

    def load_config(self):
        """Load configuration from config.json"""
        try:
            config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.json')
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        except Exception as e:
            print(f"Error loading config: {e}")
            sys.exit(1)

    def setup_ai(self):
        """Setup AI client and load environment variables"""
        try:
            env_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env')
            load_dotenv(env_path)
            
            api_key = os.getenv("GROQ_API_KEY")
            if not api_key:
                raise ValueError("GROQ_API_KEY not found in environment variables")
                
            self.ai_client = Groq(api_key=api_key)
        except Exception as e:
            print(f"Error setting up AI client: {e}")
            sys.exit(1)

    def _start_idle_checker(self):
        """Start the idle checking thread"""
        self.idle_checker = threading.Thread(target=self._check_idle, daemon=True)
        self.idle_checker.start()

    def _start_command_processor(self):
        """Start the command processing thread"""
        self.command_processor = threading.Thread(target=self._process_command_queue, daemon=True)
        self.command_processor.start()

    def _check_idle(self):
        """Check for idle timeout"""
        while self.is_listening:
            if self.is_active and not self.speech.manual_sleep:
                timeout = self.config["assistant_settings"]["voice_settings"]["timeout_seconds"]
                if time.time() - self.last_activity > timeout:
                    print("Going to sleep due to inactivity...")
                    self.deactivate()
            time.sleep(1)

    def _process_command_queue(self):
        """Process commands from the queue"""
        while self.is_listening:
            try:
                if not self.command_queue.empty():
                    command = self.command_queue.get()
                    self.is_processing = True
                    self.process_command(command)
                    self.is_processing = False
                    self.command_queue.task_done()
                time.sleep(0.1)
            except Exception as e:
                print(f"Error processing command: {e}")
                self.is_processing = False

    def get_response(self, response_type):
        """Get a random response from configured responses"""
        responses = self.config["responses"].get(response_type, [])
        return random.choice(responses) if responses else None

    def get_ai_response(self, text):
        """Get AI response for user input"""
        try:
            # Add user message to memory
            self.memory.add_to_history("user", text)

            # Get acknowledgment
            ack = self.get_response("acknowledgments")
            if ack:
                self.audio.speak(ack, priority=True)

            # Get conversation history for context
            messages = [
                {"role": "system", "content": self.config["ai_settings"]["system_prompt"]},
                *self.memory.get_messages_for_ai()
            ]

            # Generate AI response
            completion = self.ai_client.chat.completions.create(
                model=self.config["ai_settings"]["model"],
                messages=messages,
                temperature=self.config["ai_settings"]["temperature"],
                max_tokens=self.config["ai_settings"]["max_tokens"],
                stream=True
            )

            response = "".join(chunk.choices[0].delta.content or "" 
                             for chunk in completion)

            # Add assistant response to memory
            self.memory.add_to_history("assistant", response)
            return response

        except Exception as e:
            print(f"AI error: {e}")
            error_msg = self.get_response("errors")
            return error_msg if error_msg else "I encountered an error."

    def _get_command_variations(self):
        """Get command variations for better recognition"""
        return {
            'mute_commands': [
                # Old style commands
                "mute", "shut up", "quiet",
                # New style commands
                "stop talking", "pause speaking", "be quiet",
                "silence please", "stop speaking", "pause voice",
                "quiet now", "stop audio", "silence",
                # Natural variations
                "be silent", "hush", "quiet mode",
                "stop for now", "pause", "take a break"
            ],
            'unmute_commands': [
                # Old style commands
                "unmute", "speak up", "continue",
                # New style commands
                "resume speaking", "continue talking", "speak again",
                "start speaking", "resume voice", "voice on",
                # Natural variations
                "you can speak", "talk to me", "keep talking",
                "go ahead", "continue please", "start again"
            ],
            'music_keywords': [
                # Old style
                "play", "song", "music", "spotify",
                # New style
                "start music", "play something", "put on some music",
                "play a song", "start playlist", "music please",
                # Genre specific
                "play rock", "play jazz", "play pop",
                # Mood based
                "play something happy", "play workout music", 
                "play relaxing music", "play party music"
            ],
            'volume_commands': [
                # Old style
                "volume up", "volume down", "louder", "quieter",
                # New style
                "increase volume", "decrease volume", 
                "make it louder", "make it quieter",
                "turn it up", "turn it down",
                # Natural variations
                "a bit louder", "little quieter", 
                "raise the volume", "lower the volume"
            ],
            'playback_controls': [
                # Basic controls
                "pause", "resume", "stop", "play",
                # Track navigation
                "next", "previous", "skip", "back",
                "next song", "previous song", "skip this",
                # Natural variations
                "play the next one", "go back one", 
                "skip this song", "play the previous one"
            ]
        }

    def process_command(self, command):
        """Process user command"""
        if not command:
            return

        command = command.lower().strip()
        variations = self._get_command_variations()

        # Voice control commands get immediate priority
        if any(cmd in command for cmd in variations['mute_commands']):
            self.audio.toggle_mute()
            return
            
        elif any(cmd in command for cmd in variations['unmute_commands']):
            self.audio.unmute()
            return

        # Music commands - Handle these before AI
        if any(keyword in command for keyword in variations['music_keywords']):
            success, msg = self.system.handle_music_command(command)
            msg = self._clean_text_for_tts(msg)
            self.audio.speak(msg)
            self.audio.wait_until_done()
            return

        # Volume control
        if any(cmd in command for cmd in variations['volume_commands']):
            success, msg = self.system.handle_music_command(command)
            msg = self._clean_text_for_tts(msg)
            self.audio.speak(msg)
            self.audio.wait_until_done()
            return

        # Playback control
        if any(cmd in command for cmd in variations['playback_controls']):
            success, msg = self.system.handle_music_command(command)
            msg = self._clean_text_for_tts(msg)
            self.audio.speak(msg)
            self.audio.wait_until_done()
            return

        # Time queries
        if any(phrase in command for phrase in ["time", "what time", "current time", "clock"]):
            current_time = datetime.now().strftime('%I:%M %p')
            self.audio.speak(f"It's {current_time}")
            self.audio.wait_until_done()
            return

        # Application control with variations
        if any(cmd in command for cmd in ["open", "start", "launch", "run"]):
            target = command
            for cmd in ["open", "start", "launch", "run"]:
                target = target.replace(cmd, "").strip()
            
            success, msg = self.system.open_website(target)
            if success:
                self.audio.speak(self._clean_text_for_tts(msg))
                self.audio.wait_until_done()
                return
                
            success, msg = self.system.open_application(target)
            self.audio.speak(self._clean_text_for_tts(msg))
            self.audio.wait_until_done()
            return

        # Close/Exit variations
        if any(cmd in command for cmd in ["close", "exit", "quit", "terminate", "stop"]):
            target = command
            for cmd in ["close", "exit", "quit", "terminate", "stop"]:
                target = target.replace(cmd, "").strip()
            
            if any(word in target for word in ["spotify", "music", "song", "player"]):
                success, msg = self.system.handle_music_command("close")
            else:
                success, msg = self.system.close_application(target)
            
            self.audio.speak(self._clean_text_for_tts(msg))
            self.audio.wait_until_done()
            return

        # Window control with variations
        if any(cmd in command for cmd in ["minimize", "hide", "shrink"]):
            target = command.replace("minimize", "").replace("hide", "").replace("shrink", "").strip()
            success, msg = self.system.minimize_window(target)
            self.audio.speak(self._clean_text_for_tts(msg))
            self.audio.wait_until_done()
            return

        if any(cmd in command for cmd in ["maximize", "expand", "full screen"]):
            target = command.replace("maximize", "").replace("expand", "").replace("full screen", "").strip()
            success, msg = self.system.maximize_window(target)
            self.audio.speak(self._clean_text_for_tts(msg))
            self.audio.wait_until_done()
            return

        # System commands with variations
        if any(cmd in command for cmd in ["shutdown", "restart", "sleep", "hibernate", "power off", "reboot"]):
            for cmd, msg in self.config["system_commands"].items():
                if any(keyword in command for keyword in [cmd, f"{cmd} computer", f"{cmd} system"]):
                    success, msg = self.system.execute_system_command(msg)
                    self.audio.speak(f"Executing {cmd} command")
                    self.audio.wait_until_done()
                    return

        # Exit assistant command variations
        if any(word in command for word in ["goodbye", "bye", "see you", "later", "good night"]):
            self.cleanup()
            return

        # Default to AI conversation for unhandled commands
        response = self.get_ai_response(command)
        cleaned_response = self._clean_text_for_tts(response)
        self.audio.speak(cleaned_response)
        self.audio.wait_until_done()

    def listen_for_commands(self):
        """Listen for commands while assistant is active"""
        while self.is_active:
            try:
                command = self.speech.listen()
                if command:
                    self.last_activity = time.time()
                    self.command_queue.put(command)
            except Exception as e:
                print(f"Error listening: {e}")
                time.sleep(0.1)

    def activate(self):
        """Activate the assistant"""
        self.is_active = True
        self.last_activity = time.time()
        greeting = self.get_response("greetings")
        self.audio.speak(greeting)

    def deactivate(self):
        """Deactivate the assistant"""
        if self.is_active:
            goodbye = self.get_response("goodbyes")
            self.audio.speak(goodbye)
            self.is_active = False

    def cleanup(self):
        """Cleanup and exit"""
        print("\nCleaning up...")
        self.is_listening = False
        goodbye = self.get_response("goodbyes")
        self.audio.speak(goodbye)
        self.audio.wait_until_done()
        time.sleep(1)
        self.audio.stop()
        sys.exit(0)

    def run(self):
        """Main run loop with enhanced interaction pattern"""
        print(f"\nStarting {self.config['assistant_settings']['name']}...")
        welcome_msg = f"Voice assistant ready. Wake me by saying {self.config['assistant_settings']['name']}"
        self.audio.speak(welcome_msg)
        self.audio.wait_until_done()
        
        consecutive_failures = 0
        max_failures = 3  # Number of failed attempts before sleep
        command_timeout = 20  # Seconds to wait for command
        
        while self.is_listening:
            try:
                # Wait for wake word when inactive
                if not self.is_active:
                    print("\nWaiting for wake word...")
                    wake_word_detected, initial_command = self.speech.detect_wake_word()
                    
                    if wake_word_detected:
                        consecutive_failures = 0  # Reset failure counter
                        self.activate()
                        
                        # Process initial command if present (combined wake word + command)
                        if initial_command:
                            print(f"Processing initial command: {initial_command}")
                            self.process_command(initial_command)
                            self.audio.wait_until_done()
                            command_count = 1
                        else:
                            command_count = 0
                            
                        # Start command session
                        command_start_time = time.time()
                        max_commands = 3  # Number of commands before requiring wake word again
                        
                        # Continue listening for more commands
                        while self.is_active and command_count < max_commands:
                            # Check for timeout
                            if time.time() - command_start_time > command_timeout:
                                print("\nCommand timeout reached, going to sleep...")
                                self.deactivate()
                                break

                            # Listen for next command
                            if command_count > 0:  # Only prompt if not first command
                                print("\nListening for next command...")
                            command = self.speech.listen()
                            
                            if command:
                                # Reset timeout on successful command
                                command_start_time = time.time()
                                command_count += 1
                                self.last_activity = time.time()
                                
                                # Process the command
                                self.process_command(command)
                                
                                # Wait for any ongoing speech to complete
                                self.audio.wait_until_done()
                                
                                # If this was the last allowed command, go to sleep
                                if command_count >= max_commands:
                                    print("\nMaximum commands reached, going to sleep...")
                                    self.audio.speak("Going to sleep. Wake me when you need me.")
                                    self.audio.wait_until_done()
                                    self.deactivate()
                            else:
                                consecutive_failures += 1
                                if consecutive_failures >= max_failures:
                                    print("\nToo many failed attempts, going to sleep...")
                                    self.audio.speak("I'll go to sleep now. Wake me when you need me.")
                                    self.audio.wait_until_done()
                                    self.deactivate()
                                    consecutive_failures = 0  # Reset counter
                                    break
                                
                time.sleep(0.1)  # Small delay to prevent CPU overuse
                
            except KeyboardInterrupt:
                self.cleanup()
            except Exception as e:
                print(f"\nError in main loop: {e}")
                time.sleep(1)
                
                
    def activate(self):
        """Activate the assistant with enhanced feedback"""
        self.is_active = True
        self.last_activity = time.time()
        
        # Get and speak a random greeting
        greeting = self.get_response("greetings")
        if greeting:
            self.audio.speak(greeting)
            self.audio.wait_until_done()
            print("\nAssistant activated and ready for commands")

    def deactivate(self):
        """Deactivate the assistant with enhanced feedback"""
        if self.is_active:
            # Get and speak a random goodbye
            goodbye = self.get_response("goodbyes")
            if goodbye:
                self.audio.speak(goodbye)
                self.audio.wait_until_done()
            
            self.is_active = False
            print("\nAssistant deactivated")
            time.sleep(1)  # Brief pause before accepting wake word again

def main():
    """Entry point of the application"""
    try:
        assistant = Assistant()
        assistant.run()
    except Exception as e:
        print(f"Critical error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()